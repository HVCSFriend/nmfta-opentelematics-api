FORMAT: 1A

# NMFTA Fleet Resiliency - Open Telematics API DRAFT

![NMFTA Logo](https://raw.githubusercontent.com/nmfta-repo/nmfta-opentelematics-api/master/media/image1.png)

This document is written using [api-blueprint](https://apiblueprint.org/) and available online at both [opentelematicsapi.docs.apiary.io](https://opentelematicsapi.docs.apiary.io/#) (for browsable document) and https://github.com/nmfta-repo/nmfta-opentelematics-api for the API blueprint source. Please use https://github.com/nmfta-repo/nmfta-opentelematics-api to raise issues and suggest changes to the API.

If a telematics system provider (TSP) suddenly goes out of business
(have had two examples of this in 2018) any commercial fleet relying on
their service will need to find a new provider. Due to the lack of a
standardized telematics data format, a commercial fleet manager will
have to reintegrate an alternate telematics provider's data format into
their existing system reporting.

This is a standardized API for retrieving telematics logs & data.
Each participating TSP would be individually responsible for the necessary
translations from their existing formats to this Open Telematics
API. Each TSP would continue to be responsible for managing their
own cloud infrastructure housing customer data. The Open Telematics API, as an additional interface,
will be made available by TSPs to allow their customers ready
access to pull data in the standardized format, especially in examples
of mixed TSP fleets.

## Authentication

**All requests** to Open Telematics API endpoints **require authentication**.

For this version of the API, `v1`, all authentication must be performed using HTTP Basic. e.g.

```http
Authorization: Basic YWRtaW46YWRtaW4=
```

This authentication method relies entirely on the security protections provided by the TLS layer; therefore HTTPS is mandatory on all connections and implementors must follow adhere to the security requirements detailed in the *Security Requirements for Implementors* section below.

TSPs implementing the Open Telematics API must provide a means to create username-password pair credentials and these must be associated with roles (see section *Authorization* below).

## Authorization

TSPs implementing the Open Telematics API must include access controls for requests against the following roles.

* *Vehicle Sink*
* *Vehicle Return Sink*
* *Sink*
* *Return Sink*
* *Admin*

It must be possible for clients to usernames for Authentication (see above) which are assigned to **one role and no more than one role**.

TSPs implementing the Open Telematics API must restrict authorization of requests to only those roles that are assigned
in the **Access Controls** tables throughout this API specification. The tables will look like the following example:

| Vehicle Sink | Vehicle Return Sink | Sink  | Return Sink | Admin |
|:-------------|---------------------|-------|-------------|-------|
| `DENY/ALLOW` | `DENY/ALLOW` | `DENY/ALLOW` | `DENY/ALLOW` | `DENY/ALLOW` |

The intent of these access controls is so that carriers can limit which clients they deploy have access to:
* any resources at all
* any Personally Identifiable Information (PII)
* streaming feeds of new events as they are added to the TSP

As can be seen in the **Access Controls** tables in the requests subsections of *References* that follow, the roles
are assigned `DENY/ALLOW` such that:
* the *X Return Sink* roles have access to streaming feeds, whereas the *X Sink* roles have access only to collections
queries and
* the *Vehicle X* roles are intended to be safe from PII.

## Security Requirements for Implementors

All TSPs that implement an Open Telematics API instance are expected to
provide a secure service by default. In what follows we outline some
security requirements that are expected in addition to the authentication
and access control that is detailed in the sections above.

### General Security Requirements

Vendors must maintain a vulnerability response and disclosure program in
accordance with established standards such as International Organization
of Standards (ISO)/International Electrotechnical Commission (IEC)
29147:2014 (Information technology \-- Security techniques \--
Vulnerability Disclosure) and ISO/IEC 30111:2013 (Information technology
\-- Security techniques \-- Vulnerability Handling Processes).

Vendors should ensure their vulnerability response and disclosure
program conforms with the ['Legal bug bounty' safe-harbor requirements](https://github.com/EdOverflow/legal-bug-bounty)
to protect researchers and encourage the highest-quality participation.

### Open Telematics API Server Security Requirements

**TLS Configuration**
The TLS security for Open Telematics API servers is of paramount importance. All
of the confidentiality and integrity protections are relying on this layer. For this
reason, Open Telematics API servers must ensure that their HTTPS / TLS configurations
are of the highest quality. Following the [Qualys SSL Labs Guide](https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices) is reccomended.  The automated tool, also
by Qualys SSL Labs, at [https://www.ssllabs.com/ssltest/](https://www.ssllabs.com/ssltest/) will report a
'letter grade'; it is expected that TSPs will have letter grades of 'A' or higher according to that tool.

### Open Telematics API Client Security Requirements

**Certificate Pinning**
Because the confidentiality of credentials is only protected by TLS in this version, it is
very important that all Open Telematics API clients must be configured such that substitution of
any TLS certificates results in a failure to establish any connections
to the Open Telematics API server. i.e. clients must implement certificate pinning.

## Working With Dates

When exchanging dates as parameters to API methods or in responses from the API, you must ensure that
they are formatted properly as an ISO 8601 string (format
`yyyy-MM-ddTHH:mm:ss.fffZ`). In addition, all dates will have to first be
converted to UTC in order to ensure time zone information and daylight
savings times are accounted for correctly.

## Working With Locations

When exchanging locations as parameters to API methods or in responses from the API, you must ensure
that they are formatted as a latitude+longitude pair (format `[-]aaa.aaaaaaa [-]ooo.ooooooo`).

## Error States

The common [HTTP Response Status Codes](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md) are used.

# Group Duty Status Log

## Duty Status Log            [/api{version}/dutystatuslog/byid/{dutystatuslog_id}]

+ Parameters
    + version: `v1` (enum[string]) - API version
        + Members
            + `v1`
    + dutystatuslog_id: `C4CA4238A0B923820DCC509A6F75849B` (string) - ID of the Duty Status Log of interest

+ Attributes (object)
    + id                : `C4CA4238A0B923820DCC509A6F75849B` (string) - The unique identifier for the specific Entity object in the system.
    + annotations       : `C81E728D9D4C2F636F067F89CC14862C`, `ECCBC87E4B5CE2FE28308FD9F2A7BAF3` (array[string]) - The list of AnnotationLog(s) which are associated with this log.
    + coDrivers         : `A87FF679A2F3E71D9181A67B7542122C`, `E4DA3B7FBBCE2345D7772B0674A318D5` (array[string]) - The list of the co-driver User(s) for this log.
    + eldDateTime       :          `2019-01-0100:00:00.000Z` (string) - Date and time from the ELD device
    + vehicleId         : `21232F297A57A5A743894A0E4A801FC3` (string) - The vehicle id associated with this log.
    + driverId          : `63A9F0EA7BB98050796B649E85481845` (string) - The id of the driver who created this log.
    + distanceLastValid :                                117 (number) - The distance in whole miles traveled since the last valid latitude, longitude pair the ELD measured with required accuracy in the ELD mandate
    + editDateTime      :          `2019-01-0100:00:00.000Z` (string) - The date and time the log was edited. If the log has not been edited, this will not be set.
    + eventRecord       : `5F4DCC3B5AA765D61D8327DEB882CF99` (string) - An event record that meets the reporting criteria set for the Log
    + location          :         ` 37.4224764 -122.0842499` (string) - An object with the location information for the log data.
    + malfunction       :                                `0` (string) - The DutyStatusMalfunctionType of the DutyStatusLog record. As a flag it can be both a diagnostic and malfunction state which is used to mark status based records (e.g. \"D\", \"SB\") as having a diagnostic or malfunction present at time of recording. (TODO as a list in enumerated constants)
    + origin            :                                `0` (string) - The DutyStatusOrigin from where this log originated. (TODO as a list in enumerated constants)
    + parentId          : `D6AB4B1A2E51C28CB32BFE8982D42259` (string) - The Id of the parent DutyStatusLog. Used when a DutyStatusLog is edited. When returning history, this field will be populated.
    + sequence          :                                 23 (number) - The sequence number, which is used to generate the sequence ID.
    + state             :                                `0` (string) - The DutyStatusState of the DutyStatusLog record. (TODO as a list in enumerated constants)
    + status            :                                `0` (string) - The DutyStatusLogType representing the driver's duty status. TODO as a list in enumerated constants)
    + verifyDateTime    :          `2019-01-0100:00:00.000Z` (string) - The date and time the log was verified. If the log is unverified, this will not be set. This is the same as log certification. This will be the last certification date.
    + fileDataCheck     : `164731747FC7236D799E588F60EFBBE7` (string) - A hexadecimal "check" value
    + lineDataCheck     : `9F7D0EE82B6A6CA7DDEAE841F3253059` (string) - A hexadecimal "check" value
    + multidayBasis     :                                  0 (number) - Multiday basis (7 or 8) used by the motor carrier to compute cumulative duty hours
    + outputFileComment : `fake Duty Status Log for testing` (string) - A textual field that may be populated with information pertaining to the creation of an ELD output file

### Get a Duty Status Log by its ID [GET]

**Access Controls**

| Vehicle Sink | Vehicle Return Sink | Sink  | Return Sink | Admin |
|:-------------|---------------------|-------|-------------|-------|
| DENY         | DENY                | ALLOW | DENY        | ALLOW |

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (Duty Status Log)

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="protected"

## Duty Status Log Collection [/api{version}/dutystatuslog/bydate{?start,stop}]

+ Parameters
    + version: `v1` (enum[string]) - API version
        + Members
            + `v1`
    + start: `2019-01-0100:00:00.000Z` (string) - the start-date of the search
    + stop:  `2019-01-0100:00:00.000Z` (string) - the stop-date of the search

+ Attributes (object)
    + data (array[Duty Status Log], fixed-type)

### Search for all Duty Status Logs in a Time Range [GET]

**Access Controls**

| Vehicle Sink | Vehicle Return Sink | Sink  | Return Sink | Admin |
|:-------------|---------------------|-------|-------------|-------|
| DENY         | DENY                | ALLOW | DENY        | ALLOW |

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (Duty Status Log Collection)

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="protected"

## Duty Status Log Feed       [/api{version}/dutystatuslog/feed{?token}]

+ Parameters
    + version: `v1` (enum[string]) - API version
        + Members
            + `v1`
    + token: `37A6259CC0C1DAE299A7866489DFF0BD` (string, optional) - a since-token, pass-in the token previously returned by `feed` to 'follow' new Duty Status Logs; pass in a `null` to start with a new token set to 'now'.

+ Attributes (object)
    + token (string) - a since-token, pass-in the token previously returned by `feed` to 'follow' new Duty Status Logs
    + feed (array[Duty Status Log], fixed-type)

### Follow a Feed of Duty Status Logs as they are Added to the System [GET]

**Access Controls**

| Vehicle Sink | Vehicle Return Sink | Sink | Return Sink | Admin |
|:-------------|---------------------|------|-------------|-------|
| DENY         | DENY                | DENY | ALLOW       | ALLOW |

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (Duty Status Log Feed)

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="protected"

# Group More To Come
